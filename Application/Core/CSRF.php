<?php
class Core_CSRF
{
	//create csrf token, and validate them 
	public function setToken()
	{
		//create csrf token, and store them to the cookies and session
		if(!isset($COOKIE['csrf']) && !isset($_SESSION['csrf'])){
		$token = $this->generateString(10);
		setcookie('csrf',$token,NULL,'/',NULL,NULL,TRUE);
		$_SESSION['csrf'] = $token; //if cookies are disabled
		}
	}

	public function getToken()
	{
		//return csrf token created before. if there isnt token, return false
		if(isset($COOKIE['csrf'])){
			return $COOKIE['csrf'];
		} else if (isset($_SESSION['csrf']) ) {
			return $_SESSION['csrf'];
		} else {
			return false;
		}
	}
	
	public function chekToken($token)
	{
		//chek if token, represented by the user, is the same as generated by php
		$realToken = $this->getToken();
		if ($token == $realToken){
			return true;
		}
		return false;
	}
	
	
	private function generateString($length)
	{
		$letters = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n',
						'o','p','q','r','s','t','u','v','w','x','y','z','0','1',
						'2','3','4','5','6','7','8','9');
		$str='';
		for($i=0;$i<$length;$i++){
			$str .= $letters[array_rand($letters)];
		}
		return $str;	
	}
	
	
}